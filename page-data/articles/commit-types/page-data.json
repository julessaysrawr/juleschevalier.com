{"componentChunkName":"component---src-templates-article-template-js","path":"/articles/commit-types","result":{"data":{"markdownRemark":{"html":"<p>I was introduced to the idea of <a href=\"https://github.com/commitizen/conventional-commit-types/blob/master/index.json\">commit types</a>, which has been a game changer for me.  As far as I can tell, the idea seems to have come from the Angular community, and is used if you want to contribute to <a href=\"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type\">Angular</a>.  There seems to be momentum behind standardizing <a href=\"https://www.conventionalcommits.org/en/v1.0.0/\">Conventional Commits</a>, like <a href=\"https://semver.org/\">Semantic Versioning</a>.</p>\n<p>Benefits of using commit types:</p>\n<ul>\n<li>Makes commit messages be more meaningful</li>\n<li>Improved clarity around what is being committed</li>\n<li>Helped to ensure smaller commits</li>\n<li>Rebasing joy, when using squash and merge commits</li>\n</ul>\n<p>An example of what commit history will look like when using this approach</p>\n<pre><code>abc1234 fix: removing ul list bullets from nav\nabc1234 feat: renaming blog to articles and adding topics (#14)\nabc1234 feat: adding npm script for listing scripts\nabc1234 feat: adding emotion for link styling (#13)\nabc1234 blog: adding new article and put all blogs in one dir\nabc1234 feat: updating now page\nabc1234 chore: update packages\nabc1234 blog: adding new article: Busy\nabc1234 fix: config cleanup\nabc1234 fix: starting with one blog tag for now\n</code></pre>\n<p>A side note: Even if you are the only dev on a team, using \"squash and merge\" option on pull requests will make rebasing much less of a hassle when it gets complex.  Combining commit types with </p>\n<h2>How I use Commit Types</h2>\n<p><strong>Scenario:</strong> I make a bunch of changes and I am ready to commit.  Now, what were those commit types again?</p>\n<p>This happened <em>every time</em> I wanted to commit something, so I created a shell alias to help with that.  In my dotfiles repo, I have <code>commit-types</code> file which contains</p>\n<pre><code>feat - A new feature\nfix - A bug fix\ndocs - Documentation only changes\nstyle - Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\nrefactor - A code change that neither fixes a bug nor adds a feature\nperf - A code change that improves performance\ntest - Adding missing tests or correcting existing tests\nbuild - Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\nci - Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\nchore - Other changes that don't modify src or test files\nrevert - Reverts a previous commit\n</code></pre>\n<p>In my shell profile I have the following aliases:</p>\n<pre><code>alias commit-types='cat ~/dotfiles/commit-types'\nalias ct='cat ~/dotfiles/commit-types'\n</code></pre>\n<p>The aliases will print out the contents of the commit types file into my terminal.</p>\n<p>So when I have my files staged and ready to commit, i just run <code>ct</code> or <code>commit-types</code> and it will list the commit types out for me. It helps me to use them all the time if they are at the tips of my fingers. ðŸŽ‰</p>\n<h2>Proposal</h2>\n<p><em>This is me thinking out loud.  If you have any thoughts, please send me an <a href=\"mailto:hellothere@juleschevalier.com\">email</a></em></p>\n<p>I have noticed that there are a few commit types I keep wanting to reach for that don't exist.</p>\n<blockquote>\n<p><strong>copy</strong> - for text changes that are not content or CMS driven</p>\n<p><strong>content</strong>: adding or updating articles or blog posts</p>\n<p><strong>style</strong>: feels like it should be css changes, not linter changes</p>\n<p><strong>format</strong>: might be good for linter/prettier changes instead of <strong>style</strong></p>\n</blockquote>\n<!-- <br>\n<br> -->\n<p>So I updated the commit-types dotfile to include:</p>\n<pre><code>style - css changes that do not effect the meaning of the code\nformat - linter/prettier auto-generated updates that do not effect meaning of code\ncontent - adding or updating articles\ncopy - text changes not related to content\n</code></pre>\n<h2>Conclusion</h2>\n<p>Commit types have brought clarity to what I am commiting.  They have improved not only the commiting process but also the rebase process.  If this sounds like something that you might be interested in, I encourage you to try it out.</p>\n<p>I am going to try out adding the proposed commit types in the repos I work the most in.  I'll report back how that goes in the future.</p>","frontmatter":{"date":"March 21st, 2020","path":"/articles/commit-types","title":"Commit Types","topic":"Technology"}}},"pageContext":{}}}